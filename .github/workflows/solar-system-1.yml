name: Solar System Workflow

on: 
  workflow_dispatch:
env: 
  IMAGE_NAME: "solar-system"    
jobs:
    test: 
      name: test
      runs-on: ubuntu-latest
      steps: 
        - name: clone repository
          env:
            TOKEN: ${{ secrets.GITHUB_TOKEN }}
          run: |
            git clone https://$TOKEN@github.com/${{ github.repository_owner }}/github-actions-solar-system.git
        
        - name: install dependencies          
          run: cd ./github-actions-solar-system/ && npm ci

        - name: run test
          env: 
            MONGO_URI: "${{ vars.MONGO_URI }}"
            MONGO_USERNAME: "${{ vars.MONGO_USERNAME }}"
            MONGO_PASSWORD: "${{ secrets.MONGO_PASSWORD }}"
          run: |
            cd ./github-actions-solar-system/ && npm test
            ls -lrt

        - name: upload artifact
          uses: actions/upload-artifact@v4
          with:
            name: test-report
            path: ./github-actions-solar-system/test-results.xml

    build: 
      name: build
      runs-on: ubuntu-latest
      needs: [test]
      steps: 
        - name: clone repository
          env:
            TOKEN: ${{ secrets.GITHUB_TOKEN }}
          run: |
            git clone https://$TOKEN@github.com/${{ github.repository_owner }}/github-actions-solar-system.git

        - name: verify docker version
          run: |
            docker --version
            docker info

        - name: build docker image
          run: |
            docker build \
              --file ./github-actions-solar-system/Dockerfile \
              --build-arg MONGO_URI="${{ vars.MONGO_URI }}" \
              --build-arg MONGO_USERNAME="${{ vars.MONGO_USERNAME }}" \
              --build-arg MONGO_PASSWORD="${{ secrets.MONGO_PASSWORD }}" \
              -t solar-system:"${{ github.sha }}" .

        - name: run test container and capture id
          id: step_run_test_container
          run: |
            CONTAINER_ID=$(docker run -it -d --name my-running-app -p 3000:3000 solar-system:${{ github.sha }})
            echo $CONTAINER_ID
            echo "test_container_id=$CONTAINER_ID" >> $GITHUB_OUTPUT

        - name: validate test container
          run: |            
            sleep 5
            curl --fail http://localhost:3000/ready || (docker logs ${{ steps.step_run_test_container.outputs.test_container_id }} && exit 1)            
        
        - name: login to docker registry
          run: |
            docker login -u ${{ vars.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
          
        - name: push image to docker registry
          run: |
            docker push docker.io/${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

        - name: cleanup
          if: always()
          run: docker rm -f ${{ steps.step_run_test_container.outputs.test_container_id }}
        



        # - name: login to docker hub
        #   uses: docker/login-action@v3
        #   with:
        #     username: ${{ vars.DOCKERHUB_USERNAME }}
        #     password: ${{ secrets.DOCKERHUB_TOKEN }}
    # unit-testing:
    #     name: Unit Testing                          
    #     runs-on: ubuntu-latest
    #     # Expose step outputs as job outputs
    #     outputs: 
    #       my-step-output-1: ${{ steps.output-step-1.outputs.expectedout }}
    #       my-step-output-2: ${{ steps.output-step-2.outputs.expectedout }}
    #     steps:
    #     - name: Checkout Repository
    #       uses: actions/checkout@v4

    #     - name: Setup NodeJS Version
    #       uses: actions/setup-node@v4
    #       with:
    #         node-version: 20

    #     - name: Cache NPM dependencies
    #       id: cache-npm-dependencies
    #       uses: actions/cache@v4
    #       with:
    #         path: ~/.npm
    #         key: ${{ runner.os }}-3rdparty-dependencies-${{ hashFiles('package-lock.json') }}
    
    #     - name: Install Dependencies
    #       run: npm install
    
    #     - name: Unit Testing
    #       run: npm test
        
    #     - name: Output step-1
    #       id: output-step-1
    #       run: 
    #         echo "expectedout=Hello" >> "$GITHUB_OUTPUT"
    #     - name: Output step-2
    #       id: output-step-2
    #       run: 
    #         echo "expectedout=world" >> "$GITHUB_OUTPUT"
          
    #     - name: Archive Test Result
    #       uses: actions/upload-artifact@v4
    #       continue-on-error: true
    #       with:
    #         name: Mocha-Test-Result
    #         path: test-results.xml
    # code-coverage: 
    #   name: code-coverage
    #   runs-on: ubuntu-latest
    #   needs: unit-testing
    #   steps:
    #     - name: get output - from previous job
    #       run: echo ${{ needs.unit-testing.outputs.my-step-output-1 }} ${{ needs.unit-testing.outputs.my-step-output-2 }} 

    #     - name: downloading artifact
    #       uses: actions/download-artifact@v4
    #       # with:
    #       #   name: my-artifact
    #     - name: Display structure of downloaded files
    #       run: ls -R
